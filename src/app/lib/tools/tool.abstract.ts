import { Action } from '@lib/actions/action.class';
import { ActionStack } from '@lib/action-stacks/action-stack.class';
import { ToolName } from './tools';
import { IToolConfiguration } from '@lib/tools/tool-configuration.interface';

/**
 * Defines an object which can trigger actions
 */
export class Tool {
  protected config!: IToolConfiguration;

  /** Name of the tool */
  public static toolName: ToolName;
  /** Path where the app can find the icon of the tool */
  static svgPath = '/assets/customSVG/hexagonFull.svg';

  /** 
   * @summary Build and triggers an action when corresponding to a click
   * @returns a list of actions if it is triggered.
   * @returns null if the method is not defined by the tool (the event is not taken into account by the tool)
  */
  doClick(x: number, y: number, stack?: ActionStack): Action[] | null { return null; }

  /** 
   * @summary Build and triggers an action when corresponding to a press (mouse button is down)
   * @returns a list of actions if it is triggered.
   * @returns null if the method is not defined by the tool (the event is not taken into account by the tool)
  */
  doPress(x: number, y: number, stack?: ActionStack): Action[] | null { return null; }

  /** 
   * @summary Build and triggers an action when corresponding to a release (mouse button is up)
   * @returns a list of actions if it is triggered.
   * @returns null if the method is not defined by the tool (the event is not taken into account by the tool)
   */
  doRelease(x: number, y: number, stack?: ActionStack): Action[] | null { return null; }

  /** 
   * @summary Check if the user has completed all the client-side actions.
   * @returns null if no more action is needed after the action is completed.
   * @returns null if the user has not finished the action (for instance he has not drawn the second point while he want to bind two points)
   * @returns a final action to do after the client has achieved as his actions (for instance, the client has drawn two points, now we need to add the line between)
  */
  checkCompleted(stack: ActionStack): Action | null { return null; }

  /**
   * @summary set the configuration of the tool (colors ...)
   * @param config 
   */
  configure(config: IToolConfiguration) {
    this.config = config;
  }

  /**
   * @summary triggered between two client-side actions.
   * For instance when the user has clicked to draw a first point, but the app is waiting for the second one, so this is used to draw the preview of the line
   * @param x 
   * @param y 
   * @param stack 
   * @returns 
   */
  doUnPress(x: number, y: number, stack?: ActionStack): Action[] | null { return null; }

  /**
   * remove eventual ghost actions from the stack. Ghost actions are generated by checkCompleted.
   * @param stack 
   */
  removeGhostElement(stack: ActionStack): void {}
}
